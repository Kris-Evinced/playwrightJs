const fs = require("fs"), os = require("os"), path = require("path"), { saveReport, getOnlyUniqueIssues } = require("@evinced/js-playwright-sdk"), evincedConfigFileName = "evConfig.json"; function readConfigFile() { let e = null; try { e = JSON.parse(fs.readFileSync("evConfig.json", "utf-8"))?.reporterOptions } catch (e) { return process.env.evincedReporterEnabled = "false", void console.log(`Error reading the evConfig.json file: "${e}". Evinced Aggregated Reporter cannot be enabled.`) } return e } class EvincedReporter { onBegin(e, r) { const s = readConfigFile(); if (!s) return; const n = s?.reportFormat, i = s?.fileName, o = s?.outputDir, t = void 0 !== s?.tmpDir ? s.tmpDir : `${os.tmpdir()}/evincedTmpFiles`; if (process.env.evincedReporterEnabled = (!!(n && o && i)).toString(), "true" === process.env.evincedReporterEnabled) { if (process.env.evincedReporterTmpIssuesFileName = "_evincedIssues", process.env.evincedReporterTmpScreenshotsFileName = "_evincedScreenshotsData", process.env.evincedReporterTmpAxePassesFileName = "_evincedAxePasses", process.env.evincedReporterTmpDir = t, fs.existsSync(t)) { const e = process.env.evincedReporterTmpIssuesFileName, r = process.env.evincedReporterTmpScreenshotsFileName, s = process.env.evincedReporterTmpAxePassesFileName; fs.readdirSync(t).filter((r => r.endsWith(e))).forEach((e => fs.unlinkSync(`${t}/${e}`))), fs.readdirSync(t).filter((e => e.endsWith(r))).forEach((e => fs.unlinkSync(`${t}/${e}`))), fs.readdirSync(t).filter((e => e.endsWith(s))).forEach((e => fs.unlinkSync(`${t}/${e}`))) } else fs.mkdirSync(t, { recursive: !0 }); fs.existsSync(o) || fs.mkdirSync(o, { recursive: !0 }) } else console.log(`Evinced Aggregated Reporter cannot be enabled with options: ${JSON.stringify(s)}, please check the fileName, outputDir, and reportFormat are provided in the evConfig.json file`) } onEnd(e) { if ("true" !== process.env.evincedReporterEnabled) return; const r = readConfigFile(), s = process.env.evincedReporterTmpIssuesFileName, n = process.env.evincedReporterTmpScreenshotsFileName, i = process.env.evincedReporterTmpAxePassesFileName, o = process.env.evincedReporterTmpDir, t = r.reportFormat, c = r?.fileName, p = r?.outputDir; let a = []; fs.readdirSync(o).filter((e => e.endsWith(s))).forEach((e => { fs.readFileSync(path.resolve(`${o}/${e}`), { encoding: "utf8" }).split("\n").forEach((e => { "" !== e && a.push(...JSON.parse(e)) })) })); const d = {}; fs.readdirSync(o).filter((e => e.endsWith(n))).forEach((e => { fs.readFileSync(path.resolve(`${o}/${e}`), { encoding: "utf8" }).split("\nendMap").forEach((e => { if ("" === e || "undefined" === e) return; const r = JSON.parse(e); Object.keys(r).forEach((e => { d[e] = r[e] })) })) })); let l = []; fs.readdirSync(o).filter((e => e.endsWith(i))).forEach((e => { fs.readFileSync(path.resolve(`${o}/${e}`), { encoding: "utf8" }).split("\n").forEach((e => { "" !== e && l.push(...JSON.parse(e)) })) })), saveReport(getOnlyUniqueIssues(a), t, `${p}/${c}`, d, getOnlyUniqueIssues(l)) } } module.exports = EvincedReporter;