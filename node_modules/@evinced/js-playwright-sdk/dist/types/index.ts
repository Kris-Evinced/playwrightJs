import { Page } from '@playwright/test';
// Axe Core (Can't use the original types as they are not exported)
// https://github.com/dequelabs/axe-core/blob/develop/axe.d.ts

declare namespace axe {
  type TagValue = string;
  type ReporterVersion = 'v1' | 'v2' | 'raw' | 'raw-env' | 'no-passes';
  type RunOnlyType = 'rule' | 'rules' | 'tag' | 'tags';
  type resultGroups = 'inapplicable' | 'passes' | 'incomplete' | 'violations';

  interface RunOnly {
    type: RunOnlyType;
    values: TagValue[] | string[];
  }

  interface RuleObject {
    [key: string]: {
      enabled: boolean;
    };
  }

  export interface RunOptions {
    runOnly?: RunOnly | TagValue[] | string[];
    rules?: RuleObject;
    reporter?: ReporterVersion;
    resultTypes?: resultGroups[];
    selectors?: boolean;
    ancestry?: boolean;
    xpath?: boolean;
    absolutePaths?: boolean;
    iframes?: boolean;
    elementRef?: boolean;
    frameWaitTime?: number;
    preload?: boolean;
    performanceTimer?: boolean;
  }
}

export type SkipValidation = {
  selector: string;
  urlRegex: string;
  validationTypes: string[];
};

export type EvInitOptions = {
  rootSelector?: string;
  enableScreenshots?: boolean;
  returnAxePassed?: boolean;
  includeIframes?: boolean;
  axeConfig?: axe.RunOptions;
  skipValidations?: SkipValidation[];
  logging?: {
    LOGGING_LEVEL: string;
    ADD_LOGGING_CONTEXT?: boolean;
  };
  toggles?: { [key: string]: boolean };
};

export interface EvAnalyzeOptions extends EvInitOptions {
  uploadToPlatform?: boolean;
}

type IssueElement = {
  componentId: string;
  domSnippet: string;
  id: string;
  index: string;
  pageUrl: string;
  selector: string;
};

type IssueSeverity = {
  id: string;
  name: string;
};

type IssueTag = {
  description: string;
  id: string;
  link: string;
};

type IssueType = {
  id: string;
  newId: string;
  name: string;
};

type IssueValidation = {
  id: string;
};

export type Issue = {
  additionalInformation: any;
  duplicates?: string;
  description: string;
  elements: IssueElement[];
  firstSeenTime: number;
  lastSeenTime: number;
  hidden: boolean;
  id: string;
  index: string;
  severity: IssueSeverity;
  signature: string;
  summary: string;
  tags: IssueTag[];
  type: IssueType;
  validation: IssueValidation;
  knowledgeBaseLink?: string;
  screenshotId?: string;
  customFields?: {};
};

export type AnalysisReportComponent = {
  id: string;
  selector: string;
  index: string;
};

export type ReportWithAxePassed = {
  issues: Issue[],
  axePassed: Issue[]
}

type VersionToSelector = {
  [version: string]: string;
};

type SelectorToVersions = {
  [selector: string]: VersionToSelector;
};

export type AnalysisReport = {
  analysisId: string;
  components: AnalysisReportComponent[];
  validations: any[];
  report: Issue[];
  axePasses?: Issue[];
  persistentIssues: any;
  selectorsToVersions?: SelectorToVersions;
  configuration?: any;
  screenshotsMap?: Map<string, string>;
  pageUrl: string;
  length: number;
};

export interface EvPage extends Page {
  evincedState?: {
    lastRecordingUrl?: string;
    collectedIssuesByURL: {
      analysisId: string;
      url: string;
      issues: Issue[];
    }[];
    axePassed: Issue[];
  };
}

export type OfflineCredentials = {
  serviceId: string;
  token: string;
};

export type Credentials = {
  serviceId: string;
  secret: string;
};
