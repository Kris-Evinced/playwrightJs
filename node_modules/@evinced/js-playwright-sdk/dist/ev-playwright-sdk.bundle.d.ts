import { Page } from '@playwright/test';
// @ts-ignore
import {
  AnalysisReport,
  Credentials,
  EvAnalyzeOptions,
  EvInitOptions,
  EvPage,
  Issue,
  OfflineCredentials,
  ReportWithAxePassed,
} from '../evincedSDK/types/types';

declare class EvincedSDK {
  page: EvPage;
  constructor(page: Page, uploadToPlatform?: { setUploadToPlatformDefault?: boolean; });
  evAnalyze(options?: EvAnalyzeOptions): Promise<Issue[] | AnalysisReport | any>;
  evStart(initOptions?: EvInitOptions): Promise<void>;
  evStop(options?: { uploadToPlatform:boolean }): Promise<Promise<Issue[]> | any>;
  evSaveFile(
    issues: Issue[] | AnalysisReport | ReportWithAxePassed | any,
    format: 'json' | 'html' | 'sarif' | 'csv',
    destination: string,
  ): Promise<void>;
  testRunInfo: TestRunInformation;
}

declare function setOfflineCredentials({ serviceId, token }: OfflineCredentials): void;
declare function setCredentials({ serviceId, secret }: Credentials): void;
declare function setUploadToPlatformConfig(platformUploadOptions: { enableUploadToPlatform: boolean, setUploadToPlatformDefault?: boolean }): void;
interface CustomLabelInterface {
  [key: string]: string;
}

interface TestRunInfoInterface {
  userAgent?: string,
  enginesVersion?: string,
  viewportWidth?: string,
  viewportHeight?: string,
  productVersion?: string,
  testName?: string,
  testFile?: string,
  environment?: string,
  flow?: string,
  gitUserName?: string,
  gitBranch?: string,
  gitVersion?: string,
  customLabel?: CustomLabelInterface;
}

declare class TestRunInformation {
  testRunId: string;

  constructor(runInfo?: TestRunInfoInterface);

  customLabel(customParameter: CustomLabelInterface): void;

  addLabel(parameter: TestRunInfoInterface): void;

}
